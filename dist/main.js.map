{"version":3,"sources":["../node_modules/prop-types/lib/ReactPropTypesSecret.js","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/index.js","sr-only/index.js","blocks.js"],"names":["ReactIs","throwOnDirectAccess","module","exports","require","__","wp","i18n","richText","registerFormatType","toggleFormat","RichTextToolbarButton","editor","name","title","srOnlyEdit","isActive","value","onChange","onFocus","type","propTypes","PropTypes","bool","string","func","tagName","className","edit"],"mappings":";AAOA,aAEA,IAAA,EAAA,+CAEA,OAAA,QAAA;;ACJA,aAEA,IAAA,EAAA,QAAA,8BAEA,SAAA,KACA,SAAA,KACA,EAAA,kBAAA,EAEA,OAAA,QAAA,WACA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,GAAA,IAAA,EAAA,CAIA,IAAA,EAAA,IAAA,MACA,mLAKA,MADA,EAAA,KAAA,sBACA,GAGA,SAAA,IACA,OAAA,EAFA,EAAA,WAAA,EAMA,IAAA,EAAA,CACA,MAAA,EACA,KAAA,EACA,KAAA,EACA,OAAA,EACA,OAAA,EACA,OAAA,EACA,OAAA,EAEA,IAAA,EACA,QAAA,EACA,QAAA,EACA,YAAA,EACA,WAAA,EACA,KAAA,EACA,SAAA,EACA,MAAA,EACA,UAAA,EACA,MAAA,EACA,MAAA,EAEA,eAAA,EACA,kBAAA,GAKA,OAFA,EAAA,UAAA,EAEA;;ACtDMA,IAAAA,EAIAC,EAKJC,OAAOC,QAAUC,QAAQ,6BAARA;;;;ACuBnB,aAlCA,IAAA,EAAA,EAAA,QAAA,eAkCA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAjCA,QAAA,kBAEQC,IAAAA,EAAOC,GAAGC,KAAVF,GACqCC,EAAAA,GAAGE,SAAxCC,EAAAA,EAAAA,mBAAoBC,EAAAA,EAAAA,aACpBC,EAA0BL,GAAGM,OAA7BD,sBAEFE,EAAO,cACPC,EAAQT,EAAG,sBAEXU,EAAa,SAA4C,GAAzCC,IAAAA,EAAAA,EAAAA,SAAUC,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,SAAUC,EAAAA,EAAAA,QAW/C,OAAA,MACC,cAAA,MAAA,SAAA,KAAA,MAAC,cAAA,EAAD,CAAuB,KAAK,SAAS,MAAOL,EAAO,QAPrC,WAHfI,EAASR,EAAaO,EAAO,CAAEG,KAAMP,KAKrCM,KAKsE,SAAUH,MAKlFD,EAAWM,UAAY,CACtBL,SAAUM,EAAUC,QAAAA,KACpBN,MAAOK,EAAUE,QAAAA,OACjBN,SAAUI,EAAUG,QAAAA,KACpBN,QAASG,EAAUG,QAAAA,MAGpBhB,EAAmBI,EAAM,CACxBC,MAAAA,EACAY,QAAS,OACTC,UAAW,sBACXC,KAAMb;;AC/BP,aAAA,QAAA","file":"main.js","sourceRoot":"../src","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Register a screen reader only text format.\n *\n * @package screen-reader-only-format\n */\n\nimport PropTypes from 'prop-types';\nimport './sr-only.scss';\n\nconst { __ } = wp.i18n;\nconst { registerFormatType, toggleFormat } = wp.richText;\nconst { RichTextToolbarButton } = wp.editor;\n\nconst name = 'rkv/sr-only';\nconst title = __('Screen Reader Only');\n\nconst srOnlyEdit = ({ isActive, value, onChange, onFocus }) => {\n\tconst onToggle = () => {\n\t\tonChange(toggleFormat(value, { type: name }));\n\t};\n\n\tconst onClick = () => {\n\t\tonToggle();\n\t\tonFocus();\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<RichTextToolbarButton icon=\"hidden\" title={title} onClick={onClick} isActive={isActive} />\n\t\t</>\n\t);\n};\n\nsrOnlyEdit.propTypes = {\n\tisActive: PropTypes.bool,\n\tvalue: PropTypes.string,\n\tonChange: PropTypes.func,\n\tonFocus: PropTypes.func,\n};\n\nregisterFormatType(name, {\n\ttitle,\n\ttagName: 'span',\n\tclassName: 'text-format-sr-only',\n\tedit: srOnlyEdit,\n});\n","/**\n * Gutenberg Blocks\n *\n * All blocks related JavaScript.\n * You can create a new block folder in\n * this dir and include code for that block\n * here as well.\n *\n * All blocks should be included here since\n * this is the file that Webpack is compiling.\n */\n\n// Screen reader only text format control.\nimport './sr-only';\n"]}